function [ct, cst] = new_PTV_shaped_coned_inverse_1(ct, cst, modulatorDepth, yLocation, coneBaseRadius, coneHeight_on_top_of_mod, coneSpacingX, coneSpacingZ, HU, cutout_start, width_margingsYXZ, structureColor, varargin)
    % Parameters with defaults
    if ~exist('modulatorDepth','var') || isempty(modulatorDepth), modulatorDepth = 20; end
    if ~exist('HU','var') || isempty(HU), HU = 132; end
    if ~exist('coneBaseRadius','var') || isempty(coneBaseRadius), coneBaseRadius = 3; end
    if ~exist('coneSpacingX','var') || isempty(coneSpacingX), coneSpacingX = 2*coneBaseRadius; end
    if ~exist('coneSpacingZ','var') || isempty(coneSpacingZ), coneSpacingZ = 2*coneBaseRadius; end
    if ~exist('cutout_start','var') || isempty(cutout_start), cutout_start = 0; end
    if ~exist('width_margingsYXZ','var') || isempty(width_margingsYXZ), width_margingsYXZ = [5 5 5]; end
    if ~exist('structureColor','var') || isempty(structureColor), structureColor = [0 1 1]; end

%% Find PTV to determine width
    ixPTV = find(strcmp(cst(:,2), 'PTV'));
    if isempty(ixPTV), error('PTV structure not found in CST'); end
    
    PTV_voxels = cst{ixPTV,4}{1};
    [ptv_y, ptv_x, ptv_z] = ind2sub(ct.cubeDim, PTV_voxels);
    
    %% Calculate PTV height profile (for cone length adjustment)
    % Create a map of PTV depth at each (x,z) position
    PTV_depth_map = zeros(ct.cubeDim(2), ct.cubeDim(3));
    for i = 1:length(ptv_x)
        x = ptv_x(i);
        z = ptv_z(i);
        PTV_depth_map(x,z) = max(PTV_depth_map(x,z), ptv_y(i));
    end
    
    % Normalize depth map (0 = no PTV, 1 = deepest PTV)
    max_depth = max(PTV_depth_map(:));
    min_depth = min(PTV_depth_map(PTV_depth_map>0));
    PTV_depth_map_norm = (PTV_depth_map - min_depth) / (max_depth - min_depth);
    PTV_depth_map_norm(isnan(PTV_depth_map_norm)) = 0;
    
    %% Calculate dimensions with margin (rest of your existing code...)
    %% [Keep all your existing code until the cone creation part]
    
    %% Create cones with lengths mirroring PTV shape
    x_positions = Modulator_center(2)-halfSize(2):coneSpacingX:Modulator_center(2)+halfSize(2);
    z_positions = Modulator_center(3)-halfSize(3):coneSpacingZ:Modulator_center(3)+halfSize(3);
    modulatorCones = zeros(ct.cubeDim);
    
    for x_idx = 1:length(x_positions)
        for z_idx = 1:length(z_positions)
            x = round(x_positions(x_idx));
            z = round(z_positions(z_idx));
            
            % Get actual top y-value at this (x,z) position
            y_base = top_surface(x,z);
            if y_base == 0, continue; end % Skip if no base
            
            % Calculate cone length based on PTV depth
            if x >= 1 && x <= size(PTV_depth_map,1) && z >= 1 && z <= size(PTV_depth_map,2)
                depth_factor = PTV_depth_map_norm(x,z);
                % Invert the relationship - deeper PTV = longer cone
                cone_length = maxConeHeight * (0.5 + 0.5*depth_factor); 
            else
                cone_length = maxConeHeight * 0.5; % Default medium length
            end
            
            % Grow upward from the surface
            for y_offset = 0:cone_length
                y = y_base - y_offset;
                if y < 1, break; end
                
                currentRadius = coneBaseRadius * (1 - y_offset/cone_length);
                
                for dx = -ceil(currentRadius):ceil(currentRadius)
                    for dz = -ceil(currentRadius):ceil(currentRadius)
                        if dx^2 + dz^2 <= currentRadius^2
                            voxelX = x + dx;
                            voxelY = y;
                            voxelZ = z + dz;
                            
                            if voxelX >= 1 && voxelX <= ct.cubeDim(2) && ...
                               voxelY >= 1 && voxelY <= ct.cubeDim(1) && ...
                               voxelZ >= 1 && voxelZ <= ct.cubeDim(3)
                                modulatorCones(voxelY, voxelX, voxelZ) = 1;
                            end
                        end
                    end
                end
            end
        end
    end
    
    %% Combine base and cones
    finalMask = (modulatorMask | modulatorCones);
    
    %% Finalize modulator
    cst{ixModulator,4}{1} = find(finalMask);
    ct.cubeHU{1}(cst{ixModulator,4}{1}) = HU;
end